{
  "name": "node-base64-image",
  "version": "0.1.2",
  "description": "Download images from remote URLs and encode/decode them to base64",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/tests.js"
  },
  "engines": {
    "node": ">=0.10"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/riyadhalnur/node-base64-image"
  },
  "homepage": "http://riyadhalnur.github.io/node-base64-image/",
  "keywords": [
    "image",
    "download",
    "base64",
    "encode",
    "decode",
    "javascript",
    "node"
  ],
  "bugs": {
    "url": "https://github.com/riyadhalnur/node-base64-image/issuess"
  },
  "author": {
    "name": "Riyadh Al Nur",
    "email": "riyadhalnur@verticalaxisbd.com",
    "url": "http://blog.verticalaxisbd.com"
  },
  "license": "MIT",
  "dependencies": {
    "request": "^2.51.x"
  },
  "devDependencies": {
    "mocha": "^2.0.x",
    "should": "^4.3.x"
  },
  "readme": "[![Build Status](https://travis-ci.org/riyadhalnur/node-base64-image.svg?branch=master)](https://travis-ci.org/riyadhalnur/node-base64-image)  \n\nnode-base64-image\n=================\n\nDownload images from remote URLs or use local images and encode/decode them to base64\n\nTo install  \n`npm install node-base64-image --save`  \n\nTo run tests  \n`npm test`  \n\n### Usage  \n\nRequire the library in your .js file  \n`var base64 = require('node-base64-image');`  \n\n#### Download and encode an image  \n```\nvar options = {string: true};\n\nbase64.base64encoder('www.someurl.com/image.jpg', options, function (err, image) {\n    if (err) {\n        console.log(err);\n    }\n    console.log(image);\n});\n```\n\n#### Encode a local image  \n```  \nvar path = __dirname + '/../test.jpg',\n          options = {localFile: true, string: true};\n\nbase64.base64encoder(path, options, function (err, image) {  \n    if (err) { console.log(err); }  \n    console.log(image);  \n});  \n```\n\n\n##### Parameters  \n - `url` (string) - the url of the image to be downloaded and encoded.\n - `options` (object)\n \t- if `string` is passed is with 'true', the image returned will be a base64 string. Otherwise, the base64 buffer is returned.  \n \t- if `localFile` is passed is with 'true', a local image instead of a remote one will be used  \n - `callback` (function) - the callback will contain the err object and the encoded image object.  \n\n#### Decode and write a base64 encoded image to disk  \n```  \nvar options = {filename: 'test'};\nvar imageData = new Buffer('/9j/4AAQSkZJRgABAQAAAQABAAD...', 'base64');\n\nbase64.base64decoder(imageData, options, function (err, saved) {\n    if (err) { console.log(err); }  \n    console.log(saved);    \n});  \n```  \n\n##### Parameters  \n - `imageData` (buffer) - the base64 image buffer.  \n - `options` (object) - contains the 'filename' property; this will be the written image file.  \n - `callback` (function) - the callback will contain the err object and the 'successful save' string.\n\n### License  \nThis library is licensed under the MIT license.  \n\n### Issues  \nReport a bug in the issues.   \n\nLovingly crafted in Dhaka, Bangladesh by [Riyadh Al Nur](http://blog.verticalaxisbd.com)\n",
  "readmeFilename": "README.md",
  "_id": "node-base64-image@0.1.2",
  "dist": {
    "shasum": "ab61f8fbe601428a758cf7195dc6ee92de3b4c1c"
  },
  "_from": "node-base64-image@",
  "_resolved": "https://registry.npmjs.org/node-base64-image/-/node-base64-image-0.1.2.tgz"
}
