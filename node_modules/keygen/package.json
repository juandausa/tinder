{
  "name": "keygen",
  "version": "0.2.1",
  "description": "url-friendly, random, unique key/token generation",
  "keywords": [
    "token",
    "key",
    "random",
    "unique"
  ],
  "homepage": "https://github.com/bitbutcher/keygen",
  "bugs": {
    "url": "https://github.com/bitbutcher/keygen/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bitbutcher/keygen.git"
  },
  "author": {
    "name": "Sean M. Duncan",
    "email": "bitbutcher@gmail.com"
  },
  "contributors": [
    {
      "name": "John E. Bailey",
      "email": "john@devmode.com",
      "url": "http://devmode.com/who"
    }
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "engines": {
    "node": ">=0.10.0 <6.0.0",
    "npm": ">=2.0.0 <4.0.0"
  },
  "devDependencies": {
    "blanket": "^1.1.7",
    "coffee-script": "^1.9.3",
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-coffee": "^0.12.0",
    "grunt-contrib-copy": "^0.7.0",
    "grunt-mocha-test": "^0.12.7",
    "mocha": "^2.2.5"
  },
  "readme": "# Keygen\n\n> A set of functions for url-friendly, random, unique key/token generation\n\n## Getting Started\n\nInstall Keygen:\n\n```shell\nnpm install keygen --save\n```\n\n## Overview\n\nKeygen can be used to generate url-friendly or hexidecimal keys.  The url-friendly variety should be favored where possible since they are shorter but represent a significantly larger keyspace.\n\n## Examples\n\nURL Friendly Keys:\n\n```js\nvar keygen = require('keygen');\n\n// generate a small url-friendly key\nkeygen.url(keygen.small);  //-> 'ob2sdNPT6oy'\n\n// generate a medium url-friendly key\nkeygen.url(keygen.medium);  //-> 'bmGZK8pH7zTCVLJZDZPsYS'\n// or\nkeygen.url();  //-> 'zQSu6JET5kRbViW7Mz8Z7f'\n\n// generate a large url-friendly key\nkeygen.url(keygen.large);  //-> '8DtZ4nsKJNiGVHTdqtLFHgLsYoktWsUtfazpjzonFUam'\n\n// generate a huge url-friendly key via a custom uniqueness factor\nkeygen.url(11);  //-> '86ZdCFcM7TLw45rn2Hi2tN5JsKYne6Uk4XAQ76b5YWwfUtZYzfKxnv8t96u9funiTHGHzKco7JN34umyyjUvGZkBLNBQSEtj5VSkaDYXfDwQ2CmtYCmdGn6ke'\n```\n\nHexidecimal Keys:\n\n```js\nvar keygen = require('keygen');\n\n// generate a small hex key\nkeygen.hex(keygen.small);  //-> '926e8a8970835c96'\n\n// generate a medium hex key\nkeygen.hex(keygen.medium);  //-> '871136e6d634815ac8ba57af1761a0bc'\n// or\nkeygen.hex();  //-> '13f8109d204bec06da97c9f93bd7ca5a'\n\n// generate a large hex key\nkeygen.hex(keygen.large);  //-> '40ec6f83ba22d76239a95451dc59c5ab0a3448feaecc4074365ac01bd871ba08'\n\n// generate a huge hex key via a custom uniqueness factor\nkeygen.hex(11);  //-> '56beed897c1b34fdd50cad3ddd2f31b7085dca88c9c49cf96a89fee76886823a002a0dc43656848a0562cf73509b9ea98bfe6ca51e042fa59c57b0a98b2ff9e63fc41117b073a6f3cf477acfe922de4f5df3de0c3665b657'\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality.\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "keygen@0.2.1",
  "dist": {
    "shasum": "14b954de75dec3e87af65c1bffde6255f9611b59"
  },
  "_from": "keygen@",
  "_resolved": "https://registry.npmjs.org/keygen/-/keygen-0.2.1.tgz"
}
